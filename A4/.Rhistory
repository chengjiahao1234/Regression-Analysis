plot(x[x$age == "0-49 years old", c("time", "dead")], type = "o", log = "y")
matplot(xWide2[xWide2$age == "0-49 years old", Syear], type = "l", lty = 1,
col = Scol, main="Death counts by years for under 50 people")
legend("topright", col = Scol, legend = Syear, bty = "n", lty = 1, lwd = 3)
xForInlaUnder50= xForInla[xForInla$age == '0-49 years old', ]
library(INLA, verbose=FALSE)
res3 = inla(dead ~ sin12 + sin6 + cos12 + cos6 +
f(timeIid, prior='pc.prec', param= c(log(1.2), 0.5)) +
f(timeForInla, model = 'rw2', prior='pc.prec',
param= c(0.01, 0.5)), data=xForInlaUnder50,
control.predictor = list(compute=TRUE, link=1),
control.compute = list(config=TRUE),
# control.inla = list(fast=FALSE, strategy='laplace'),
family='poisson')
setwd("C:/Users/apple1/Downloads/STA442H1F/Assignments/A4")
library("Pmisc")
library("INLA")
(load("./wisconsin.RData"))
library("Pmisc")
library("sp")
(load("./wisconsin.RData"))
resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
data = wisconsinCsubm,
prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
Ntrials = wisconsinCsubm$Total, family = "binomial")
library("Pmisc")
library("sp")
(load("./wisconsin.RData"))
resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
data = wisconsinCsubm,
prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
Ntrials = wisconsinCsubm$Total, family = "binomial")
# save(resTrump, file = "./resWisconsin.RData", compress = "xz")
(load("./resWisconsin.RData"))
knitr::kable(resTrump$parameters$summary[, paste0(c(0.5, 0.025, 0.975), "quant")], digits = 5)
theColTrump = mapmisc::colourScale(wisconsinCsubm$propTrump, col = "rdBu",
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed", rev = TRUE)
(load("./wisconsin.RData"))
resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
data = wisconsinCsubm,
prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
Ntrials = wisconsinCsubm$Total, family = "binomial")
# save(resTrump, file = "./resWisconsin.RData", compress = "xz")
(load("./resWisconsin.RData"))
knitr::kable(resTrump$parameters$summary[, paste0(c(0.5, 0.025, 0.975), "quant")], digits = 5)
theColTrump = mapmisc::colourScale(wisconsinCsubm$propTrump, col = "RdBu",
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed", rev = TRUE)
theColPop = mapmisc::colourScale(wisconsinCsubm$pdens, col = "Spectral", breaks = 11,
style = "equal", transform = "log", digits = 1, rev = TRUE)
theColWhite = mapmisc::colourScale(wisconsinCsubm$propWhite, col = "Spectral",
breaks = c(0, 0.5, 0.8, 0.9, seq(0.9, 1, by = 0.02)),
style = "fixed", rev = TRUE)
theColInd = mapmisc::colourScale(wisconsinCsubm$propInd, col = "Spectral",
breaks = seq(0, 1, by = 0.1), style = "fixed", rev = TRUE)
theBg = mapmisc::tonerToTrans(mapmisc::openmap(wisconsinCm, fact = 2, path = "stamen-toner"),
col = "grey30")
install.packages("rgdal")
(load("./wisconsin.RData"))
resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
data = wisconsinCsubm,
prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
Ntrials = wisconsinCsubm$Total, family = "binomial")
# save(resTrump, file = "./resWisconsin.RData", compress = "xz")
(load("./resWisconsin.RData"))
knitr::kable(resTrump$parameters$summary[, paste0(c(0.5, 0.025, 0.975), "quant")], digits = 5)
theColTrump = mapmisc::colourScale(wisconsinCsubm$propTrump, col = "RdBu",
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed", rev = TRUE)
theColPop = mapmisc::colourScale(wisconsinCsubm$pdens, col = "Spectral", breaks = 11,
style = "equal", transform = "log", digits = 1, rev = TRUE)
theColWhite = mapmisc::colourScale(wisconsinCsubm$propWhite, col = "Spectral",
breaks = c(0, 0.5, 0.8, 0.9, seq(0.9, 1, by = 0.02)),
style = "fixed", rev = TRUE)
theColInd = mapmisc::colourScale(wisconsinCsubm$propInd, col = "Spectral",
breaks = seq(0, 1, by = 0.1), style = "fixed", rev = TRUE)
theBg = mapmisc::tonerToTrans(mapmisc::openmap(wisconsinCm, fact = 2, path = "stamen-toner"),
col = "grey30")
theInset = mapmisc::openmap(wisconsinCm, zoom = 6, path = "stamen-watercolor",
crs = mapmisc::crsMerc, buffer = c(0, 1500, 100, 700) * 1000)
mapmisc::map.new(wisconsinCsubm, 0.85)
sp::plot(wisconsinCsubm, col = theColTrump$plot, add = TRUE, lwd = 0.2)
raster::plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::insetMap(wisconsinCsubm, "bottomright", theInset, outer = TRUE, width = 0.35)
install.packages("rgeos")
(load("./wisconsin.RData"))
resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
data = wisconsinCsubm,
prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
Ntrials = wisconsinCsubm$Total, family = "binomial")
# save(resTrump, file = "./resWisconsin.RData", compress = "xz")
(load("./resWisconsin.RData"))
knitr::kable(resTrump$parameters$summary[, paste0(c(0.5, 0.025, 0.975), "quant")], digits = 5)
theColTrump = mapmisc::colourScale(wisconsinCsubm$propTrump, col = "RdBu",
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed", rev = TRUE)
theColPop = mapmisc::colourScale(wisconsinCsubm$pdens, col = "Spectral", breaks = 11,
style = "equal", transform = "log", digits = 1, rev = TRUE)
theColWhite = mapmisc::colourScale(wisconsinCsubm$propWhite, col = "Spectral",
breaks = c(0, 0.5, 0.8, 0.9, seq(0.9, 1, by = 0.02)),
style = "fixed", rev = TRUE)
theColInd = mapmisc::colourScale(wisconsinCsubm$propInd, col = "Spectral",
breaks = seq(0, 1, by = 0.1), style = "fixed", rev = TRUE)
theBg = mapmisc::tonerToTrans(mapmisc::openmap(wisconsinCm, fact = 2, path = "stamen-toner"),
col = "grey30")
theInset = mapmisc::openmap(wisconsinCm, zoom = 6, path = "stamen-watercolor",
crs = mapmisc::crsMerc, buffer = c(0, 1500, 100, 700) * 1000)
mapmisc::map.new(wisconsinCsubm, 0.85)
install.packages("adjMat")
install.packages("spdep")
(load("./wisconsin.RData"))
resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
data = wisconsinCsubm,
prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
Ntrials = wisconsinCsubm$Total, family = "binomial")
install.packages("geostatsp")
library("Pmisc")
library("sp")
(load("./wisconsin.RData"))
# resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
#                                data = wisconsinCsubm,
#                                prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
#                                Ntrials = wisconsinCsubm$Total, family = "binomial")
# save(resTrump, file = "./resWisconsin.RData", compress = "xz")
(load("./resWisconsin.RData"))
knitr::kable(resTrump$parameters$summary[, paste0(c(0.5, 0.025, 0.975), "quant")], digits = 5)
theColTrump = mapmisc::colourScale(wisconsinCsubm$propTrump, col = "RdBu",
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed", rev = TRUE)
theColPop = mapmisc::colourScale(wisconsinCsubm$pdens, col = "Spectral", breaks = 11,
style = "equal", transform = "log", digits = 1, rev = TRUE)
theColWhite = mapmisc::colourScale(wisconsinCsubm$propWhite, col = "Spectral",
breaks = c(0, 0.5, 0.8, 0.9, seq(0.9, 1, by = 0.02)),
style = "fixed", rev = TRUE)
theColInd = mapmisc::colourScale(wisconsinCsubm$propInd, col = "Spectral",
breaks = seq(0, 1, by = 0.1), style = "fixed", rev = TRUE)
theBg = mapmisc::tonerToTrans(mapmisc::openmap(wisconsinCm, fact = 2, path = "stamen-toner"),
col = "grey30")
theInset = mapmisc::openmap(wisconsinCm, zoom = 6, path = "stamen-watercolor",
crs = mapmisc::crsMerc, buffer = c(0, 1500, 100, 700) * 1000)
mapmisc::map.new(wisconsinCsubm, 0.85)
sp::plot(wisconsinCsubm, col = theColTrump$plot, add = TRUE, lwd = 0.2)
raster::plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::insetMap(wisconsinCsubm, "bottomright", theInset, outer = TRUE, width = 0.35)
mapmisc::scaleBar(wisconsinCsubm, "top", cex = 0.8)
mapmisc::legendBreaks("topright", theColTrump, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(wisconsinCsubm, col = theColPop$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("right", theColPop, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(wisconsinCsubm, col = theColInd$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("right", theColInd, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(wisconsinCsubm, col = theColWhite$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("right", theColWhite, bty = "n", inset = 0)
theColRandom = mapmisc::colourScale(resTrump$data$random.mean, col = "Spectral",
breaks = 11, style = "quantile", rev = TRUE, dec = 1)
theColFit = mapmisc::colourScale(resTrump$data$fitted.invlogit, col = "RdBu", rev = TRUE,
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed")
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(resTrump$data, col = theColRandom$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("topright", theColRandom)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(resTrump$data, col = theColFit$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("topright", theColFit)
library("Pmisc")
library("inla")
library("Pmisc")
library("INLA")
library("sp")
library("raster")
(load("./England_shp.RData"))
UK_shp$logExpected = log(UK_shp$E)
# remove an island
UK2 = UK_shp[grep("Wight", UK_shp$Name, invert = TRUE), ]
# englandRes = diseasemapping::bym(cases ~ offset(logExpected) + Ethnicity +
#                                    modelledpm25 + Unemployment,
#                                  prior = list(sd = c(0.5, 0.5), propSpatial = c(0.5, 0.5)),
#                                  family = "poisson", data = UK2)
# save(englandRes, file = "./englandRes.RData")
englandRes$parameters$summary[, c(1, 3:5)]
(load("./England_shp.RData"))
UK_shp$logExpected = log(UK_shp$E)
# remove an island
UK2 = UK_shp[grep("Wight", UK_shp$Name, invert = TRUE), ]
# englandRes = diseasemapping::bym(cases ~ offset(logExpected) + Ethnicity +
#                                    modelledpm25 + Unemployment,
#                                  prior = list(sd = c(0.5, 0.5), propSpatial = c(0.5, 0.5)),
#                                  family = "poisson", data = UK2)
# save(englandRes, file = "./englandRes.RData")
(load("./englandRes.RData"))
englandRes$parameters$summary[, c(1, 3:5)]
casesCol = mapmisc::colourScale(UK2$cases, dec = -3, breaks = 12, col = "Spectral",
style = "quantile", rev = TRUE)
Ecol = mapmisc::colourScale(UK2$E, breaks = casesCol$breaks, col = casesCol$col, style = "fixed")
pmCol = mapmisc::colourScale(UK2$modelledpm25, breaks = 9, dec = 0, style = "quantile")
ethCol = mapmisc::colourScale(UK2$Ethnicity, breaks = 9, digits = 1, style = "quantile")
uCol = mapmisc::colourScale(UK2$Unemployment, breaks = 12, dec = 0, style = "quantile")
rCol = mapmisc::colourScale(englandRes$data$random.mean, breaks = 12, dec = -log10(0.25),
style = "quantile")
fCol = mapmisc::colourScale(englandRes$data$fitted.exp, breaks = 9, dec = 1, style = "quantile")
insetEngland1 = mapmisc::openmap(UK2, zoom = 3, fact = 4, path = "waze",
crs = CRS("+init=epsg:3035"))
insetEngland = raster::crop(insetEngland1, extend(extent(insetEngland1),
-c(25, 7, 4, 9.5) * 100 * 1000))
mapmisc::map.new(UK2)
mapmisc::insetMap(UK_shp, "topright", insetEngland, width = 0.4)
plot(UK2, col = casesCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", casesCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = Ecol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", casesCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = pmCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", pmCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = ethCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", ethCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = uCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", uCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = rCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", rCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = fCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", fCol, bty = "n")
library(rgdal)
library("Pmisc")
library("INLA")
library("sp")
library("raster")
(load("./England_shp.RData"))
UK_shp$logExpected = log(UK_shp$E)
# remove an island
UK2 = UK_shp[grep("Wight", UK_shp$Name, invert = TRUE), ]
# englandRes = diseasemapping::bym(cases ~ offset(logExpected) + Ethnicity +
#                                    modelledpm25 + Unemployment,
#                                  prior = list(sd = c(0.5, 0.5), propSpatial = c(0.5, 0.5)),
#                                  family = "poisson", data = UK2)
# save(englandRes, file = "./englandRes.RData")
(load("./englandRes.RData"))
englandRes$parameters$summary[, c(1, 3:5)]
casesCol = mapmisc::colourScale(UK2$cases, dec = -3, breaks = 12, col = "Spectral",
style = "quantile", rev = TRUE)
Ecol = mapmisc::colourScale(UK2$E, breaks = casesCol$breaks, col = casesCol$col, style = "fixed")
pmCol = mapmisc::colourScale(UK2$modelledpm25, breaks = 9, dec = 0, style = "quantile")
ethCol = mapmisc::colourScale(UK2$Ethnicity, breaks = 9, digits = 1, style = "quantile")
uCol = mapmisc::colourScale(UK2$Unemployment, breaks = 12, dec = 0, style = "quantile")
rCol = mapmisc::colourScale(englandRes$data$random.mean, breaks = 12, dec = -log10(0.25),
style = "quantile")
fCol = mapmisc::colourScale(englandRes$data$fitted.exp, breaks = 9, dec = 1, style = "quantile")
insetEngland1 = mapmisc::openmap(UK2, zoom = 3, fact = 4, path = "waze",
crs = CRS("+init=epsg:3035"))
insetEngland = raster::crop(insetEngland1, extend(extent(insetEngland1),
-c(25, 7, 4, 9.5) * 100 * 1000))
mapmisc::map.new(UK2)
mapmisc::insetMap(UK_shp, "topright", insetEngland, width = 0.4)
plot(UK2, col = casesCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", casesCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = Ecol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", casesCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = pmCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", pmCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = ethCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", ethCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = uCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", uCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = rCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", rCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = fCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", fCol, bty = "n")
(load("./England_shp.RData"))
UK_shp$logExpected = log(UK_shp$E)
# remove an island
UK2 = UK_shp[grep("Wight", UK_shp$Name, invert = TRUE), ]
# englandRes = diseasemapping::bym(cases ~ offset(logExpected) + Ethnicity +
#                                    modelledpm25 + Unemployment,
#                                  prior = list(sd = c(0.5, 0.5), propSpatial = c(0.5, 0.5)),
#                                  family = "poisson", data = UK2)
# save(englandRes, file = "./englandRes.RData")
(load("./englandRes.RData"))
parTableCOVID <- englandRes$parameters$summary[, c(1, 3:5)]
parTableCOVID[, 1] <- exp(parTableCOVID[, 1])
knitr::kable(parTableCOVID, digits=3)
casesCol = mapmisc::colourScale(UK2$cases, dec = -3, breaks = 12, col = "Spectral",
style = "quantile", rev = TRUE)
Ecol = mapmisc::colourScale(UK2$E, breaks = casesCol$breaks, col = casesCol$col, style = "fixed")
pmCol = mapmisc::colourScale(UK2$modelledpm25, breaks = 9, dec = 0, style = "quantile")
ethCol = mapmisc::colourScale(UK2$Ethnicity, breaks = 9, digits = 1, style = "quantile")
uCol = mapmisc::colourScale(UK2$Unemployment, breaks = 12, dec = 0, style = "quantile")
rCol = mapmisc::colourScale(englandRes$data$random.mean, breaks = 12, dec = -log10(0.25),
style = "quantile")
fCol = mapmisc::colourScale(englandRes$data$fitted.exp, breaks = 9, dec = 1, style = "quantile")
insetEngland1 = mapmisc::openmap(UK2, zoom = 3, fact = 4, path = "waze",
crs = CRS("+init=epsg:3035"))
insetEngland = raster::crop(insetEngland1, extend(extent(insetEngland1),
-c(25, 7, 4, 9.5) * 100 * 1000))
mapmisc::map.new(UK2)
mapmisc::insetMap(UK_shp, "topright", insetEngland, width = 0.4)
plot(UK2, col = casesCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", casesCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = Ecol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", casesCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = pmCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", pmCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = ethCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", ethCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = uCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", uCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = rCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", rCol, bty = "n")
mapmisc::map.new(UK2)
plot(UK2, col = fCol$plot, add = TRUE, lwd = 0.2)
mapmisc::legendBreaks("left", fCol, bty = "n")
(load("./wisconsin.RData"))
# resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
#                                data = wisconsinCsubm,
#                                prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
#                                Ntrials = wisconsinCsubm$Total, family = "binomial")
# save(resTrump, file = "./resWisconsin.RData", compress = "xz")
(load("./resWisconsin.RData"))
parTableVote <- resTrump$parameters$summary[, paste0(c(0.5, 0.025, 0.975), "quant")]
parTableVote[, 1] <- exp(parTableVote[, 1])
knitr::kable(parTableVote, digits = 5)
theColTrump = mapmisc::colourScale(wisconsinCsubm$propTrump, col = "RdBu",
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed", rev = TRUE)
theColPop = mapmisc::colourScale(wisconsinCsubm$pdens, col = "Spectral", breaks = 11,
style = "equal", transform = "log", digits = 1, rev = TRUE)
theColWhite = mapmisc::colourScale(wisconsinCsubm$propWhite, col = "Spectral",
breaks = c(0, 0.5, 0.8, 0.9, seq(0.9, 1, by = 0.02)),
style = "fixed", rev = TRUE)
theColInd = mapmisc::colourScale(wisconsinCsubm$propInd, col = "Spectral",
breaks = seq(0, 1, by = 0.1), style = "fixed", rev = TRUE)
theBg = mapmisc::tonerToTrans(mapmisc::openmap(wisconsinCm, fact = 2, path = "stamen-toner"),
col = "grey30")
theInset = mapmisc::openmap(wisconsinCm, zoom = 6, path = "stamen-watercolor",
crs = mapmisc::crsMerc, buffer = c(0, 1500, 100, 700) * 1000)
mapmisc::map.new(wisconsinCsubm, 0.85)
sp::plot(wisconsinCsubm, col = theColTrump$plot, add = TRUE, lwd = 0.2)
raster::plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::insetMap(wisconsinCsubm, "bottomright", theInset, outer = TRUE, width = 0.35)
mapmisc::scaleBar(wisconsinCsubm, "top", cex = 0.8)
mapmisc::legendBreaks("topright", theColTrump, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(wisconsinCsubm, col = theColPop$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("right", theColPop, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(wisconsinCsubm, col = theColInd$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("right", theColInd, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(wisconsinCsubm, col = theColWhite$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("right", theColWhite, bty = "n", inset = 0)
theColRandom = mapmisc::colourScale(resTrump$data$random.mean, col = "Spectral",
breaks = 11, style = "quantile", rev = TRUE, dec = 1)
theColFit = mapmisc::colourScale(resTrump$data$fitted.invlogit, col = "RdBu", rev = TRUE,
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed")
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(resTrump$data, col = theColRandom$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("topright", theColRandom)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(resTrump$data, col = theColFit$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("topright", theColFit)
wisconsinCsubm$trump
hist(wisconsinCsubm$trump)
library("Pmisc")
library("INLA")
library("sp")
library("raster")
(load("./wisconsin.RData"))
# resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
#                                data = wisconsinCsubm,
#                                prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
#                                Ntrials = wisconsinCsubm$Total, family = "binomial")
# save(resTrump, file = "./resWisconsin.RData", compress = "xz")
(load("./resWisconsin.RData"))
parTableVote <- resTrump$parameters$summary[, paste0(c(0.5, 0.025, 0.975), "quant")]
parTableVote[, 1] <- exp(parTableVote[, 1])
knitr::kable(parTableVote, digits = 5)
theColTrump = mapmisc::colourScale(wisconsinCsubm$propTrump, col = "RdBu",
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed", rev = TRUE)
theColPop = mapmisc::colourScale(wisconsinCsubm$pdens, col = "Spectral", breaks = 11,
style = "equal", transform = "log", digits = 1, rev = TRUE)
theColWhite = mapmisc::colourScale(wisconsinCsubm$propWhite, col = "Spectral",
breaks = c(0, 0.5, 0.8, 0.9, seq(0.9, 1, by = 0.02)),
style = "fixed", rev = TRUE)
theColInd = mapmisc::colourScale(wisconsinCsubm$propInd, col = "Spectral",
breaks = seq(0, 1, by = 0.1), style = "fixed", rev = TRUE)
theBg = mapmisc::tonerToTrans(mapmisc::openmap(wisconsinCm, fact = 2, path = "stamen-toner"),
col = "grey30")
theInset = mapmisc::openmap(wisconsinCm, zoom = 6, path = "stamen-watercolor",
crs = mapmisc::crsMerc, buffer = c(0, 1500, 100, 700) * 1000)
mapmisc::map.new(wisconsinCsubm, 0.85)
sp::plot(wisconsinCsubm, col = theColTrump$plot, add = TRUE, lwd = 0.2)
raster::plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::insetMap(wisconsinCsubm, "bottomright", theInset, outer = TRUE, width = 0.35)
mapmisc::scaleBar(wisconsinCsubm, "top", cex = 0.8)
mapmisc::legendBreaks("topright", theColTrump, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(wisconsinCsubm, col = theColPop$plot, add = TRUE, lwd = 0.2, main="a")
plot(theBg, add = TRUE, maxpixels = 10^7, main="b")
mapmisc::legendBreaks("right", theColPop, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(wisconsinCsubm, col = theColInd$plot, add = TRUE, lwd = 0.2, main="c")
plot(theBg, add = TRUE, maxpixels = 10^7, main="d")
mapmisc::legendBreaks("right", theColInd, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(wisconsinCsubm, col = theColWhite$plot, add = TRUE, lwd = 0.2, main="e")
plot(theBg, add = TRUE, maxpixels = 10^7, main="f")
mapmisc::legendBreaks("right", theColWhite, bty = "n", inset = 0)
theColRandom = mapmisc::colourScale(resTrump$data$random.mean, col = "Spectral",
breaks = 11, style = "quantile", rev = TRUE, dec = 1)
theColFit = mapmisc::colourScale(resTrump$data$fitted.invlogit, col = "RdBu", rev = TRUE,
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed")
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(resTrump$data, col = theColRandom$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("topright", theColRandom)
mapmisc::map.new(wisconsinCsubm, 0.85)
plot(resTrump$data, col = theColFit$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("topright", theColFit)
(load("./wisconsin.RData"))
# resTrump = diseasemapping::bym(trump ~ logPdens + propWhite + propInd,
#                                data = wisconsinCsubm,
#                                prior = list(sd = c(log(2.5), 0.5), propSpatial = c(0.5, 0.5)),
#                                Ntrials = wisconsinCsubm$Total, family = "binomial")
# save(resTrump, file = "./resWisconsin.RData", compress = "xz")
(load("./resWisconsin.RData"))
parTableVote <- resTrump$parameters$summary[, paste0(c(0.5, 0.025, 0.975), "quant")]
parTableVote[, 1] <- exp(parTableVote[, 1])
knitr::kable(parTableVote, digits = 5)
theColTrump = mapmisc::colourScale(wisconsinCsubm$propTrump, col = "RdBu",
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed", rev = TRUE)
theColPop = mapmisc::colourScale(wisconsinCsubm$pdens, col = "Spectral", breaks = 11,
style = "equal", transform = "log", digits = 1, rev = TRUE)
theColWhite = mapmisc::colourScale(wisconsinCsubm$propWhite, col = "Spectral",
breaks = c(0, 0.5, 0.8, 0.9, seq(0.9, 1, by = 0.02)),
style = "fixed", rev = TRUE)
theColInd = mapmisc::colourScale(wisconsinCsubm$propInd, col = "Spectral",
breaks = seq(0, 1, by = 0.1), style = "fixed", rev = TRUE)
theBg = mapmisc::tonerToTrans(mapmisc::openmap(wisconsinCm, fact = 2, path = "stamen-toner"),
col = "grey30")
theInset = mapmisc::openmap(wisconsinCm, zoom = 6, path = "stamen-watercolor",
crs = mapmisc::crsMerc, buffer = c(0, 1500, 100, 700) * 1000)
mapmisc::map.new(wisconsinCsubm, 0.85)
# trump
sp::plot(wisconsinCsubm, col = theColTrump$plot, add = TRUE, lwd = 0.2)
raster::plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::insetMap(wisconsinCsubm, "bottomright", theInset, outer = TRUE, width = 0.35)
mapmisc::scaleBar(wisconsinCsubm, "top", cex = 0.8)
mapmisc::legendBreaks("topright", theColTrump, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
# pdens
plot(wisconsinCsubm, col = theColPop$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("right", theColPop, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
# ind
plot(wisconsinCsubm, col = theColInd$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("right", theColInd, bty = "n", inset = 0)
mapmisc::map.new(wisconsinCsubm, 0.85)
# white
plot(wisconsinCsubm, col = theColWhite$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("right", theColWhite, bty = "n", inset = 0)
theColRandom = mapmisc::colourScale(resTrump$data$random.mean, col = "Spectral",
breaks = 11, style = "quantile", rev = TRUE, dec = 1)
theColFit = mapmisc::colourScale(resTrump$data$fitted.invlogit, col = "RdBu", rev = TRUE,
breaks = sort(unique(setdiff(c(0, 1, seq(0.2, 0.8, by = 0.1)),
0.5))), style = "fixed")
mapmisc::map.new(wisconsinCsubm, 0.85)
# random
plot(resTrump$data, col = theColRandom$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("topright", theColRandom)
mapmisc::map.new(wisconsinCsubm, 0.85)
# fit
plot(resTrump$data, col = theColFit$plot, add = TRUE, lwd = 0.2)
plot(theBg, add = TRUE, maxpixels = 10^7)
mapmisc::legendBreaks("topright", theColFit)
UK2$cases
hist(UK2$cases)
